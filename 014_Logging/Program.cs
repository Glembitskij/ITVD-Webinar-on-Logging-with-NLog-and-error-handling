// NLog - це потужна бібліотека для логування в програмах на мові C#
// та інших платформах .NET. Вона надає можливість здійснювати розширений контроль
// над логуванням додатка, дозволяючи настроювати формат запису логів,
// визначати різні цільові місця для логів (файли, бази даних, консоль і т. д.),
// а також використовувати різні рівні логування.

using NLog;
using NLog.Config;
using NLog.Fluent;
using NLog.Targets;

class Program
{
    private static readonly Logger Logger = LogManager.GetCurrentClassLogger();
    static void Main()
    {
        SetupNLog();

        try
        {
            // Приклад логування

            // Використовується для виведення найбільш деталізованих повідомлень.
            // Подібні повідомлення можуть нести важливу інформацію про додатки та
            // його будову, тому цей рівень краще використовувати при розробці,
            // але ніяк не при публікації
            Logger.Trace("Trace");
           
            // Для виведення інформації, яка може бути корисною в
            // процесі розробки та відладки додатків
            Logger.Debug("Це повідомлення для відладки");
            
            // Рівень повідомлень, що дозволяє просто відслідкувати
            // потік виконання додатків
            Logger.Info("Застосунок запущено");

            // Використовується для виведення повідомлень про несподіваних подіях,
            // наприклад, помилках, які не зупиняють виконання додатків,
            // але в той же час повинні бути досліджені
            Logger.Warn("Приклад Попередження");

            // Для виведення інформації про помилки та виключення,
            // які виникли при поточній операції та які не можуть
            // бути оброблені
            Logger.Error("Це приклад помилки");

            // Рівень критичних помилок, які вимагають негайної реакції
            // - помилки операційної системи, втрати даних в БД,
            // переповнення диска пам'яті і т.д.
            Logger.Fatal("Це приклад Fatal");
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Виникла помилка");
        }
        finally
        {
            LogManager.Shutdown();
        }
    }

    static void SetupNLog()
    {
        // Створення конфігурації NLog програматично
        var config = new LoggingConfiguration();

        // Додавання консольного виводу
        var consoleTarget = new ColoredConsoleTarget();

        config.AddTarget("console", consoleTarget);
        config.AddRuleForAllLevels(consoleTarget);



        // Встановлення конфігурації NLog
        LogManager.Configuration = config;
    }
}